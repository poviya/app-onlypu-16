import { Component, ElementRef, EventEmitter, Input, OnInit, Output, QueryList, ViewChildren } from '@angular/core';
import { Router } from '@angular/router';
import { Post, User } from 'src/app/interfaces';
import { DialogService } from 'src/app/library/dialog/dialog.service';
import { ModalService } from 'src/app/library/modal/modal.service';
import { SpinnerService } from 'src/app/library/spinner/spinner.service';
import { AuthService, PostService, TipService } from 'src/app/services';
import { Tools } from 'src/app/common/tools';
import { ToastService } from 'src/app/library/toast/toast.service';

@Component({
  selector: 'app-list-posts',
  templateUrl: './list-posts.component.html',
  styleUrls: ['./list-posts.component.scss']
})
export class ListPostsComponent implements OnInit {

  @Output() findAllPostUserInfiniteEvent = new EventEmitter<string>();
  
  @Input() loading = false;
  @ViewChildren('theLastList', { read: ElementRef })
  theLastList: QueryList<ElementRef>;

  dataTip: object;
  postLoading:string[]=["hola","que","tal"];

  @Input() user: User;
  @Input() posts: Post[] = [];
  
  private post: Post;
  observer: any;

  showModal = false;
  showModalTip = false;

  constructor(
      public router: Router,
      private postService: PostService,
      private spinnerService: SpinnerService,
      private dialogService: DialogService,
      private toastService: ToastService,
      public authService: AuthService,  
      private tipService: TipService,
      ) { }

  ngOnInit(): void {
  }

  intersectionObserver() {
    let options = {
      root: null,//document.querySelector('#scrollArea'),
      rootMargin: '0px',
      threshold: 0.5//1.0
    }

    this.observer = new IntersectionObserver((entries) => {
      if (entries[0].isIntersecting) {
        this.findAllPostUserInfiniteEvent.emit();
      }
    }, options);
  }

  get modalDelete() {
    return this.dialogService.modalDelete;
  }

  closeModalDelete() {
    this.dialogService.toogleDelete();
  }

  prinImages(images: any) 
  { 
    return images[0]['url'];
  };

  postMedia(item: any) 
  {
    return item.slice(0, 3);
  }

  onEdit(post: Post): void {
    this.router.navigate(['/panel/create-post/details/' + post._id]);
  }

  //********* delete  */
  onDeleteDialog(post: Post) {
    this.dialogService.toogleDelete();
    this.post = post;
  }

  onDelete(): void {
    if(!this.post)
    return;

    this.spinnerService.start();
    this.dialogService.toogleDelete();
    this.postService.delete(this.post._id).subscribe(res => {
      if(res) {
        this.posts = this.posts.filter((item: Post) => item._id!.split('.')[0] !== this.post._id);
        this.spinnerService.close();
        this.post = {};
      }
    })
  }

  innerText(text: any)
  {
    return Tools.innerText(text);
  }

  /************** tip */
  onTipDialog(post: Post) {
    this.dialogService.toogleTip();
    this.dataTip = {
      type: 'tip_post',
      post: post,
      user: post.User
    };

    this.tipService.create(this.dataTip);
  }

  copyText(post: Post) {
    const textToCopy = " https://onlypu.com/pu/" + post.slug;
    navigator.clipboard.writeText(textToCopy).then(() => {
      this.toastService.start('copied_link');
      setTimeout( () => this.toastService.close(), 2000 );
      console.log('El texto ha sido copiado al portapapeles');
    }, (err) => {
      console.error('Error al copiar el texto al portapapeles: ', err);
    });
  }

  onUpdateClick(id: string, clickType: string) {

    const data = {
      Post: id,
      clickType: clickType
    }
    //this.postService.updateClick(data).toPromise();
  }

  textMessage(item: Post) {
    // quiero hacerte darte en cuatro
    // quiero besarte toda
    // quiero hacerte genir rico
    // quiero penetrarte rico
    // estoy caliente quiero hacerte rico
    // me gustar√≠a hacer le delicioso contigo
    return "Hola, acabo de ver tu anuncio en Onlypu.com, "
      + Tools.cropText(item.title!, 25) + '(...)' +
      ", quiero hacer el delicioso contigo."
      + " https://onlypu.com/pu/" + item.slug;
  }
}
