import { Component, Directive, ElementRef, Inject, Input, OnInit, Pipe, PLATFORM_ID } from '@angular/core';
import { DomSanitizer, Meta, Title } from '@angular/platform-browser';
import { ActivatedRoute } from '@angular/router';
import { Post, PostBookmark } from 'src/app/interfaces';
import { AuthService, PostAdService } from 'src/app/services';
import { Tools } from 'src/app/common/tools';
import { isPlatformBrowser, isPlatformServer } from '@angular/common';
import { animate, style, transition, trigger, AnimationEvent } from '@angular/animations';
import { PostBookmarkService } from 'src/app/services/post-bookmark.service';

@Component({
  selector: 'app-view-ad',
  templateUrl: './view-ad.component.html',
  styleUrls: ['./view-ad.component.scss'],
  animations: [
    trigger('animation', [
      transition('void => visible', [
        style({transform: 'scale(0.5)'}),
        animate('150ms', style({transform: 'scale(1)'}))
      ]),
      transition('void => visible', [
        style({transform: 'scale(1)'}),
        animate('150ms', style({transform: 'scale(0.5)'}))
      ]),
    ]),
    trigger('animation2', [
      transition(':leave', [
        style({opacity: 1}),
        animate('50ms', style({opacity: 0.8}))
      ])
    ])
  ]
})

export class ViewAdComponent implements OnInit {

  isBrowser: boolean;
  isServer: boolean;

  categorySlug: any;  stateCitySlug: any; slug: any;
  countrySlug: any;

  post: Post;
  postBookmarkStatus: boolean = false;
  postBookmark: PostBookmark = {};
  showHtml: any;

  //@Input() 
  showCount = false;
  private element: any;
  previewImage = false;
  showMask = false;
  currentLinghtboxImage: any;
  currentIndex = 0;
  controls = true;
  totalImageCount = 0;

  constructor(
    private activeRoute: ActivatedRoute,
    private postAdService: PostAdService,
    private meta: Meta,
    private title: Title,
    private sanitizer:DomSanitizer,
    @Inject(PLATFORM_ID) private platformId: object,
    private el: ElementRef,
    private postBookmarkService: PostBookmarkService,
    private authService: AuthService,  
  ) { 
    this.slug = this.activeRoute.snapshot.paramMap.get('slug');
    this.element = el.nativeElement;
  }

  ngOnInit(): void {

    if (isPlatformBrowser(this.platformId)) {
        this.isBrowser = true;
      // move element to bottom of page (just before </body>) so it can be displayed above everything else
      document.body.appendChild(this.element);
      // close modal on background click
      this.element.addEventListener('click', (el: { target: { className: string; }; }) => {
        var target = el.target.className;
        var index = target.indexOf('lightbox');
        var indexNone = target.indexOf('icon-lightbox-carousel'); 
        if (index >= 0 && indexNone < 0) {
          this.previewImage = false;
        }
        //console.log(index)
        //console.log(indexNone)
      });
      //console.log(window?.localStorage)
      //console.log(window?.localStorage['user']!);
      //console.log(JSON.parse(localStorage.getItem('user')!));
    }
    if (isPlatformServer(this.platformId)) {
      
    }
    this.findOneSlug();

  }

  textMessage()
  {
    return "Hola, acabo de ver tu anuncio en Onlypu.com, "
            + Tools.cropText(this.post.title!, 25) + '(...)' + 
            ", me gustarÃ­a hacer le delicioso contigo."
            + " https://onlypu.com/pu/" + this.post.slug;
  }


  findOneSlug(): void
  {
    const data = {
      "slug": this.slug, 
      //"categorySlug": this.categorySlug,
      //"stateCitySlug": this.stateCitySlug
    };

    this.postAdService.findOneSlug(data).subscribe( res => {
     if(res)
     {
      this.post = res;  //console.log(res);
      this.showHtml = this.sanitizer.bypassSecurityTrustHtml (this.post.description!);
      this.currentLinghtboxImage = this.post.PostMedia![0];
      this.totalImageCount = this.post.PostMedia!.length;
      
      this.headPage();
      if (isPlatformBrowser(this.platformId)) {
        this.findBookmarks(res.Bookmark);
        //this.findOneFavoriteUser();
      }
     }
    });
  }

  findBookmarks(data: any) {
    if(this.authService.user)
    {
      var index = data.indexOf(this.authService.user._id);
      if (index >= 0) {
          this.postBookmarkStatus = true;
      }
    }
  }

  addPostBookmark(): void {
    if(this.authService.user)
    {
      const data = {
        Post: this.post._id,
        User: this.authService.user._id
      }
      this.postBookmarkStatus = true;
      this.postAdService.createBookmark(data).subscribe(res => {
        if(!res) {
          this.postBookmarkStatus = true;
        }
      });
      /*
      this.postBookmarkService.create(data).subscribe(res => {
        if(res) {
          this.postBookmark = res;
        }
      });*/
    }
  }

  /// other bookmark
  findOneFavoriteUser(): void {
    
    if(this.authService.user)
    {
      const data = {
        Post: this.post._id,
        User: this.authService.user._id
      }
      this.postBookmarkService.findOneUser(data).subscribe(res => {
        if(res) {
          this.postBookmark = res;
        }
      });
    }
    
  }

  deletePostBookmark(): void {
    if(this.authService.user)
    {
      const data = {
        Post: this.post._id,
        User: this.authService.user._id
      }
      this.postBookmarkStatus = false;
      this.postAdService.deleteBookmark(data).subscribe(res => {
        if(!res) {
          //this.postBookmark = {};
          this.postBookmarkStatus = true;
        }
      });
      /*
      this.postBookmarkService.delete(this.postBookmark._id).subscribe(res => {
        if(res) {
          this.postBookmark = {};
        }
      });
      */
    }
  }

  headPage()
  {
    const data = { 
      title: this.post.title!,
      description: this.post.description!,
      url: "https://onlypu.com/pu/" + this.post.slug,
      image: this.post.PostMedia![0].url
    }
    this.title.setTitle(data.title);

    this.meta.updateTag({name: "robots", content: 'index, follow'});
    this.meta.updateTag({name: "keywords", content: 'Angular, Universal, Example'});
    this.meta.updateTag({name: "title", content: data.title!});
    this.meta.updateTag({name: "description", content: data.description!});

    this.meta.updateTag({property: "og:type", content: "website"});
    this.meta.updateTag({property: "og:url", content: data.url});
    this.meta.updateTag({property: "og:title", content: data.title!});
    this.meta.updateTag({property: "og:description", content: data.description!});
    this.meta.updateTag({property: 'og:image', content: data.image!});

    this.meta.updateTag({property: 'twitter:card', content: 'summary'});
    this.meta.updateTag({property: 'twitter:url', content: data.url});
    //this.meta.addTag({property: 'twitter:site', content: '@AngularUniv'});
    this.meta.updateTag({property: 'twitter:title', content: data.title!});
    this.meta.updateTag({property: 'twitter:description', content: data.description!});
    this.meta.updateTag({property: 'twitter:image', content: data.image!});
    
  }

  innerText(text: any)
  {
    return Tools.innerText(text);
  }


  /****** lightbox */
  onPreviewImage(index: number) : void
  {
   
    // show immage
    this.showMask = true;
    this.previewImage = true;
    this.currentIndex = index;
    this.currentLinghtboxImage = this.post.PostMedia![index];
    this.showCount = true;
  }

  onAnimationEnd(event: AnimationEvent )
  {
    if(event.toState == 'void') 
    {
      this.showMask = false;
    }
  }

  onClosePreview()
  {
    this.previewImage = false;
  }

  next(): void {
    this.currentIndex = this.currentIndex + 1;
    if(this.currentIndex > this.post.PostMedia!.length - 1)
    {
      this.currentIndex = 0;
    }

    this.currentLinghtboxImage = this.post.PostMedia![this.currentIndex];
  }

  prev() : void {
    this.currentIndex = this.currentIndex - 1;
    if(this.currentIndex < 0)
    {
      this.currentIndex = this.post.PostMedia!.length - 1;
    }

    this.currentLinghtboxImage = this.post.PostMedia![this.currentIndex];
  }
}
